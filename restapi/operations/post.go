// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostHandlerFunc turns a function with the right signature into a post handler
type PostHandlerFunc func(PostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostHandlerFunc) Handle(params PostParams) middleware.Responder {
	return fn(params)
}

// PostHandler interface for that can handle valid post params
type PostHandler interface {
	Handle(PostParams) middleware.Responder
}

// NewPost creates a new http.Handler for the post operation
func NewPost(ctx *middleware.Context, handler PostHandler) *Post {
	return &Post{Context: ctx, Handler: handler}
}

/* Post swagger:route POST / post

Post post API

*/
type Post struct {
	Context *middleware.Context
	Handler PostHandler
}

func (o *Post) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBody post body
//
// swagger:model PostBody
type PostBody struct {

	// Depending on the input-type this value can be a file path, base64 string or a plain string.
	// Example: aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ==
	// Required: true
	Data *string `json:"data"`

	// Input format. Possible values are yaml,xml,prop.
	// Example: xml
	// Enum: [yaml xml props]
	InputFormat *string `json:"input-format,omitempty"`

	// input type
	// Example: base64
	// Enum: [file string base64]
	InputType *string `json:"input-type,omitempty"`

	// Output format. Possible values are yaml, json, props, csv, tsv, xml.
	// Example: json
	// Enum: [yaml json props csv tsv xml]
	OutputFormat *string `json:"output-format,omitempty"`
}

// Validate validates this post body
func (o *PostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInputFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOutputFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

var postBodyTypeInputFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yaml","xml","props"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postBodyTypeInputFormatPropEnum = append(postBodyTypeInputFormatPropEnum, v)
	}
}

const (

	// PostBodyInputFormatYaml captures enum value "yaml"
	PostBodyInputFormatYaml string = "yaml"

	// PostBodyInputFormatXML captures enum value "xml"
	PostBodyInputFormatXML string = "xml"

	// PostBodyInputFormatProps captures enum value "props"
	PostBodyInputFormatProps string = "props"
)

// prop value enum
func (o *PostBody) validateInputFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postBodyTypeInputFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostBody) validateInputFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.InputFormat) { // not required
		return nil
	}

	// value enum
	if err := o.validateInputFormatEnum("body"+"."+"input-format", "body", *o.InputFormat); err != nil {
		return err
	}

	return nil
}

var postBodyTypeInputTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["file","string","base64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postBodyTypeInputTypePropEnum = append(postBodyTypeInputTypePropEnum, v)
	}
}

const (

	// PostBodyInputTypeFile captures enum value "file"
	PostBodyInputTypeFile string = "file"

	// PostBodyInputTypeString captures enum value "string"
	PostBodyInputTypeString string = "string"

	// PostBodyInputTypeBase64 captures enum value "base64"
	PostBodyInputTypeBase64 string = "base64"
)

// prop value enum
func (o *PostBody) validateInputTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postBodyTypeInputTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostBody) validateInputType(formats strfmt.Registry) error {
	if swag.IsZero(o.InputType) { // not required
		return nil
	}

	// value enum
	if err := o.validateInputTypeEnum("body"+"."+"input-type", "body", *o.InputType); err != nil {
		return err
	}

	return nil
}

var postBodyTypeOutputFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yaml","json","props","csv","tsv","xml"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postBodyTypeOutputFormatPropEnum = append(postBodyTypeOutputFormatPropEnum, v)
	}
}

const (

	// PostBodyOutputFormatYaml captures enum value "yaml"
	PostBodyOutputFormatYaml string = "yaml"

	// PostBodyOutputFormatJSON captures enum value "json"
	PostBodyOutputFormatJSON string = "json"

	// PostBodyOutputFormatProps captures enum value "props"
	PostBodyOutputFormatProps string = "props"

	// PostBodyOutputFormatCsv captures enum value "csv"
	PostBodyOutputFormatCsv string = "csv"

	// PostBodyOutputFormatTsv captures enum value "tsv"
	PostBodyOutputFormatTsv string = "tsv"

	// PostBodyOutputFormatXML captures enum value "xml"
	PostBodyOutputFormatXML string = "xml"
)

// prop value enum
func (o *PostBody) validateOutputFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postBodyTypeOutputFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostBody) validateOutputFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.OutputFormat) { // not required
		return nil
	}

	// value enum
	if err := o.validateOutputFormatEnum("body"+"."+"output-format", "body", *o.OutputFormat); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post body based on context it is used
func (o *PostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBody) UnmarshalBinary(b []byte) error {
	var res PostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostOKBody post o k body
//
// swagger:model PostOKBody
type PostOKBody struct {

	// output
	Output *PostOKBodyOutput `json:"output,omitempty"`
}

// Validate validates this post o k body
func (o *PostOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOKBody) validateOutput(formats strfmt.Registry) error {
	if swag.IsZero(o.Output) { // not required
		return nil
	}

	if o.Output != nil {
		if err := o.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOK" + "." + "output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOK" + "." + "output")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post o k body based on the context it is used
func (o *PostOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOKBody) contextValidateOutput(ctx context.Context, formats strfmt.Registry) error {

	if o.Output != nil {
		if err := o.Output.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOK" + "." + "output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOK" + "." + "output")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBody) UnmarshalBinary(b []byte) error {
	var res PostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostOKBodyOutput post o k body output
//
// swagger:model PostOKBodyOutput
type PostOKBodyOutput struct {

	// result
	Result interface{} `json:"result,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this post o k body output
func (o *PostOKBodyOutput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post o k body output based on context it is used
func (o *PostOKBodyOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBodyOutput) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBodyOutput) UnmarshalBinary(b []byte) error {
	var res PostOKBodyOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
